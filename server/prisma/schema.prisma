// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This Prisma schema defines the database structure for a project related to a medical clinic or healthcare facility. It includes models for users, employees, clients, schedules, appointments, products, suppliers, purchase orders, invoices, and more.

/// The `GENDER` enum represents the gender of a person, with options for "MASCULINO" (male) and "FEMENINO" (female).

/// The `ROL` enum represents the role of a user, with options for "ADMINISTRADOR" (administrator), "EMPLEADO" (employee), and "CLIENTE" (client).

/// The `POSITIONS` enum represents the position of an employee, with options for "MEDICO" (doctor), "ENFERMERO" (nurse), "ADMINISTRATIVO" (administrative staff), "LIMPIEZA" (cleaning staff), and "SEGURIDAD" (security staff).

/// The `USER` model represents a user in the system, with fields for ID, username, email, password, role, creation date, update date, and relationships with employees and clients.

/// The `PERSON` model represents a person, with fields for ID, DNI (identification number), first name, last name, birth date, phone number, address, gender, creation date, update date, and relationships with employees and clients.

/// The `SCHEDULE` model represents a schedule, with fields for ID, start date, end date, creation date, update date, and relationships with scheduled employees.

/// The `EMPLOYEE` model represents an employee, with fields for ID, phone number, email, password, person foreign key, user foreign key, position, start date, creation date, update date, and relationships with person, user, schedules, permissions, vacations, salaries, appointments, purchase orders, and invoice orders.

/// The `SALARY` model represents the salary of an employee, with fields for ID, employee foreign key, amount, state, creation date, update date, and a relationship with the employee.

/// The `SCHEDULE_EMPLOYEE` model represents the relationship between a schedule and an employee, with fields for ID, schedule foreign key, employee foreign key, description, creation date, update date, and relationships with the schedule and employee.

/// The `PERMISION` model represents a permission granted to an employee, with fields for ID, employee foreign key, reason, discount, description, attached file, creation date, update date, and a relationship with the employee.

/// The `VACATION` model represents a vacation requested by an employee, with fields for ID, employee foreign key, start date, end date, creation date, update date, and a relationship with the employee.

/// The `CLIENT` model represents a client, with fields for ID, person foreign key, user foreign key, creation date, update date, and relationships with appointments, purchase orders, and invoice orders.

/// The `SUPPLIER` model represents a supplier, with fields for ID, name, email, phone number, address, creation date, update date, and relationships with products and purchase quotations.

/// The `CATEGORY` model represents a category for products, with fields for ID, name, description, creation date, update date, and a relationship with products.

/// The `PRODUCT` model represents a product, with fields for ID, name, description, brand, buy price, sell price, supplier foreign key, category foreign key, creation date, update date, and relationships with supplier, category, inventory, purchase quotations, purchase order details, and invoice order product details.

/// The `INVENTORY` model represents the inventory of a product, with fields for ID, product foreign key, stock, minimum stock, valued inventory, creation date, update date, and a relationship with the product.

/// The `APPOINTMENT` model represents an appointment, with fields for ID, date, description, client foreign key, employee foreign key, state, creation date, update date, and relationships with client and employee.

/// The `SERVICE` model represents a service offered by the clinic, with fields for ID, name, description, price, creation date, update date, and a relationship with invoice order service details.

/// The `PURCHASE_QUOTATION` model represents a purchase quotation, with fields for ID, date, description, state, product foreign key, supplier foreign key, creation date, update date, and relationships with product and supplier.

/// The `PURCHASE_ORDER_DETAILED` model represents a detailed item in a purchase order, with fields for ID, date, quantity, discount, description, product foreign key, purchase order foreign key, creation date, update date, and relationships with product and purchase order.

/// The `PURCHASE_ORDER` model represents a purchase order, with fields for ID, date, client foreign key, employee foreign key, description, subtotal, discount, ISV, total, creation date, update date, and relationships with client and employee.

/// The `ACCOUNT_PLAYABLE` model represents a payable account, with fields for ID, date, amount, creditor, description, state, creation date, update date.

/// The `ACCOUNT_RECEIVABLE` model represents a receivable account, with fields for ID, date, amount, debtor, description, state, creation date, update date.

/// The `INVOICE_ORDER_PRODUCT_DETAILS` model represents a detailed item in an invoice order, with fields for ID, quantity, product foreign key, discount, description, creation date, update date.

/// The schema also includes various scalar types such as `Int`, `String`, `Boolean`, `Float`, and `DateTime` for representing different data types in the database.

enum GENDER {
  MASCULINO
  FEMENINO
}

enum ROL {
  ADMINISTRADOR
  EMPLEADO
  CLIENTE
}

enum APPOINTMENT_SOLICITATION_STATE {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum APPOINTMENT_STATE {
  PENDIENTE
  ATENDIDO
}

enum PAY_METHOD {
  LINEA
  CAJA
}

enum EMPLOYEE_STATE {
  ENABLED
  DISABLED
}

enum REQUEST_STATE {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum INVENTORY_MOVEMENT_TYPE {
  ENTRADA
  SALIDA
  PEDIDO
}

enum POSITIONS {
  MEDICO
  ENFERMERO
  ADMINISTRATIVO
  RECEPCION
  LIMPIEZA
  SEGURIDAD
}

model USER {
  Id            Int        @id @default(autoincrement())
  User_Name     String
  Email         String     @unique
  Password      String
  Role          ROL
  Device_Token  String?
  created_At    DateTime   @default(now())
  updated_At    DateTime?  @updatedAt
  Employee      EMPLOYEE[]
  Client        CLIENT[]
}

model PERSON {
  Id           Int        @id @default(autoincrement())
  DNI          String     @unique
  First_Name   String
  Last_Name    String
  Birth_Date   String
  Phone_Number String?
  Address      String?
  Gender       GENDER
  Created_At   DateTime   @default(now())
  Updated_At   DateTime?  @default(now()) @updatedAt
  Employee     EMPLOYEE[]
  Client       CLIENT[]
}

model SCHEDULE {
  Id                Int                 @id @default(autoincrement())
  ScheduleName      String             
  Schedule          Json               
  Created_At        DateTime            @default(now())
  Updated_At        DateTime?           @default(now()) @updatedAt
  Schedule_Employee SCHEDULE_EMPLOYEE[]
}

model EMPLOYEE {
  Id                Int                 @id @default(autoincrement())
  Email             String              @unique
  Person_Fk         Int
  User_Fk           Int
  Position          POSITIONS
  Start_Date        DateTime
  Days_Spent        Int?                @default(0)
  State             EMPLOYEE_STATE      @default(ENABLED)
  Person            PERSON              @relation(fields: [Person_Fk], references: [Id], onDelete: Cascade)
  User              USER                @relation(fields: [User_Fk], references: [Id])
  Created_At        DateTime            @default(now())
  Updated_At        DateTime?           @default(now()) @updatedAt
  Schedule_Employee SCHEDULE_EMPLOYEE[]
  Permision         PERMISION[]
  Vacation          VACATION[]
  Salary            SALARY[]
  APPOINTMENT       APPOINTMENT[]
  SALE_ORDER        SALE_ORDER[]
  INVOICE_ORDER     INVOICE_ORDER[]
}

model SALARY {
  Id          Int       @id @default(autoincrement())
  Employee_Fk Int
  Amount      Float
  State       Boolean
  Created_At  DateTime  @default(now())
  Updated_At  DateTime? @default(now()) @updatedAt
  Employee    EMPLOYEE  @relation(fields: [Employee_Fk], references: [Id], onDelete: Cascade)
}

model SCHEDULE_EMPLOYEE {
  Id          Int       @id @default(autoincrement())
  Schedule_Fk Int
  Employee_Fk Int
  Created_At  DateTime  @default(now())
  Updated_At  DateTime? @default(now()) @updatedAt
  Schedule    SCHEDULE  @relation(fields: [Schedule_Fk], references: [Id])
  Employee    EMPLOYEE  @relation(fields: [Employee_Fk], references: [Id], onDelete: Cascade)
}

model PERMISION {
  Id            Int       @id @default(autoincrement())
  Employee_Fk   Int
  Reason        String
  State         REQUEST_STATE
  Read          Boolean
  ReadEmployee  Boolean
  Description   String
  Answer        String?
  Attached_File String?
  Start_Date    String
  End_Date      String
  Created_At    DateTime  @default(now())
  Updated_At    DateTime? @default(now()) @updatedAt
  Employee      EMPLOYEE  @relation(fields: [Employee_Fk], references: [Id], onDelete: Cascade)
}

model VACATION {
  Id            Int       @id @default(autoincrement())
  Employee_Fk   Int
  State         REQUEST_STATE
  Read          Boolean
  ReadEmployee  Boolean
  Answer        String?
  Start_Date    String
  End_Date      String
  Created_At    DateTime  @default(now())
  Updated_At    DateTime? @default(now()) @updatedAt
  Employee      EMPLOYEE  @relation(fields: [Employee_Fk], references: [Id], onDelete: Cascade)
}

model CLIENT {
  Id                       Int                        @id @default(autoincrement())
  Person_Fk                Int
  User_Fk                  Int?
  Person                   PERSON                     @relation(fields: [Person_Fk], references: [Id])
  User                     USER?                      @relation(fields: [User_Fk], references: [Id], onDelete: Cascade)
  Created_At               DateTime                   @default(now())
  Updated_At               DateTime?                  @default(now()) @updatedAt
  APPOINTMENT              APPOINTMENT[]
  SALE_ORDER               SALE_ORDER[]
  INVOICE_ORDER            INVOICE_ORDER[]
  APPOINTMENT_SOLICITATION APPOINTMENT_SOLICITATION[]
}

model SUPPLIER {
  Id                 Int                  @id @default(autoincrement())
  Name               String
  Email              String               @unique
  Phone              String
  Address            String
  Created_At         DateTime             @default(now())
  Updated_At         DateTime?            @default(now()) @updatedAt
  Product            PRODUCT[]
  PURCHASE_QUOTATION PURCHASE_QUOTATION[]
  PURCHASE_ORDER     PURCHASE_ORDER[]
}

model CATEGORY {
  Id          Int       @id @default(autoincrement())
  Name        String
  description String?
  Created_At  DateTime  @default(now())
  Updated_At  DateTime? @default(now()) @updatedAt
  Product     PRODUCT[]
}

model PRODUCT {
  Id                            Int                             @id @default(autoincrement())
  Name                          String
  Description                   String?
  Brand                         String
  Price_Buy                     Float
  Price_Sell                    Float
  Supplier_Fk                   Int
  Category_Fk                   Int
  Created_At                    DateTime                        @default(now())
  Updated_At                    DateTime?                       @default(now()) @updatedAt
  Supplier                      SUPPLIER                        @relation(fields: [Supplier_Fk], references: [Id])
  Category                      CATEGORY?                       @relation(fields: [Category_Fk], references: [Id])
  Inventory                     INVENTORY[]
  PURCHASE_QUOTATION            PURCHASE_QUOTATION[]
  PURCHASE_ORDER                PURCHASE_ORDER_DETAILED[]
  INVOICE_ORDER_PRODUCT_DETAILS INVOICE_ORDER_PRODUCT_DETAILS[]
  INVENTORY_MOVEMENT            INVENTORY_MOVEMENT[]
}

model INVENTORY {
  Id               Int       @id @default(autoincrement())
  Product_Fk       Int
  Stock            Int
  Min_Stock        Int
  Valued_Inventory Float
  Created_At       DateTime  @default(now())
  Updated_At       DateTime? @default(now()) @updatedAt
  Product          PRODUCT   @relation(fields: [Product_Fk], references: [Id], onDelete: Cascade)
}

model APPOINTMENT {
  Id          Int       @id @default(autoincrement())
  Date        DateTime
  Description String?
  Client_Fk   Int
  Employee_Fk Int
  State       APPOINTMENT_STATE
  Created_At  DateTime  @default(now())
  Updated_At  DateTime? @default(now()) @updatedAt
  Client      CLIENT    @relation(fields: [Client_Fk], references: [Id], onDelete: Cascade)
  Employee    EMPLOYEE  @relation(fields: [Employee_Fk], references: [Id], onDelete: Cascade)
}

model APPOINTMENT_SOLICITATION {
  Id          Int                            @id @default(autoincrement())
  Date        DateTime
  Client_Fk   Int
  Description String
  State       APPOINTMENT_SOLICITATION_STATE
  Created_At  DateTime                       @default(now())
  Updated_At  DateTime?                      @default(now()) @updatedAt
  Client      CLIENT                         @relation(fields: [Client_Fk], references: [Id], onDelete: Cascade)
}

model SERVICE {
  Id                            Int                             @id @default(autoincrement())
  Name                          String
  Description                   String?
  Price                         Float
  Created_At                    DateTime                        @default(now())
  Updated_At                    DateTime?                       @default(now()) @updatedAt
  INVOICE_ORDER_SERVICE_DETAILS INVOICE_ORDER_SERVICE_DETAILS[]
}

model PURCHASE_QUOTATION {
  Id          Int       @id @default(autoincrement())
  Date        DateTime
  Description String?
  State       Boolean
  Product_Fk  Int
  Supplier_Fk Int
  Created_At  DateTime  @default(now())
  Updated_At  DateTime? @default(now()) @updatedAt
  Product     PRODUCT   @relation(fields: [Product_Fk], references: [Id], onDelete: Cascade)
  Supplier    SUPPLIER  @relation(fields: [Supplier_Fk], references: [Id], onDelete: Cascade)
}

model PURCHASE_ORDER_DETAILED {
  Id                Int            @id @default(autoincrement())
  Date              DateTime
  Quantity          Int
  Description       String?
  Product_Fk        Int
  Purchase_Order_Fk Int
  Created_At        DateTime       @default(now())
  Updated_At        DateTime?      @default(now()) @updatedAt
  Product           PRODUCT        @relation(fields: [Product_Fk], references: [Id])
  Purchase_Order    PURCHASE_ORDER @relation(fields: [Purchase_Order_Fk], references: [Id], onDelete: Cascade)
}

model PURCHASE_ORDER {
  Id                      Int                       @id @default(autoincrement())
  Date                    DateTime
  Invoice_File            String?
  State                   REQUEST_STATE
  Total                   Float
  Supplier_Fk             Int                       
  Created_At              DateTime                  @default(now())
  Updated_At              DateTime?                 @default(now()) @updatedAt
  Supplier                SUPPLIER                  @relation(fields: [Supplier_Fk], references: [Id])
  PURCHASE_ORDER_DETAILED PURCHASE_ORDER_DETAILED[]
}

model SALE_ORDER {
  Id                      Int                       @id @default(autoincrement())
  Date                    DateTime
  Client_Fk               Int
  Employee_Fk             Int
  Order_File              String?
  State                   REQUEST_STATE
  Read                    Boolean
  ReadClient              Boolean
  Subtotal                Float
  Discount                Float?
  ISV                     Float
  Total                   Float
  Created_At              DateTime                  @default(now())
  Updated_At              DateTime?                 @default(now()) @updatedAt
  Client                  CLIENT                    @relation(fields: [Client_Fk], references: [Id])
  Employee                EMPLOYEE                  @relation(fields: [Employee_Fk], references: [Id])
}

model INVOICE_ORDER_PRODUCT_DETAILS {
  Id               Int           @id @default(autoincrement())
  Quantity         Int
  Product_Fk       Int
  Description      String?
  Invoice_Order_Fk Int
  Created_At       DateTime      @default(now())
  Updated_At       DateTime?     @default(now()) @updatedAt
  Product          PRODUCT       @relation(fields: [Product_Fk], references: [Id], onDelete: Cascade)
  Invoice_Order    INVOICE_ORDER @relation(fields: [Invoice_Order_Fk], references: [Id])
}

model INVOICE_ORDER_SERVICE_DETAILS {
  Id               Int           @id @default(autoincrement())
  Service_Fk       Int
  Discount         Float?
  Description      String?
  Invoice_Order_Fk Int
  Created_At       DateTime      @default(now())
  Updated_At       DateTime?     @default(now()) @updatedAt
  Service          SERVICE       @relation(fields: [Service_Fk], references: [Id])
  Invoice_Order    INVOICE_ORDER @relation(fields: [Invoice_Order_Fk], references: [Id], onDelete: Cascade)
}

model INVOICE_ORDER {
  Id                            Int                             @id @default(autoincrement())
  Client_Fk                     Int?
  Employee_Fk                   Int
  Date                          DateTime
  Invoice_File                  String?
  PayMethod                     PAY_METHOD                      @default(CAJA)
  Subtotal                      Float
  Discount                      Float?
  ISV                           Float
  Total                         Float
  Created_At                    DateTime                        @default(now())
  Updated_At                    DateTime?                       @default(now()) @updatedAt
  Client                        CLIENT?                         @relation(fields: [Client_Fk], references: [Id])
  Employee                      EMPLOYEE                        @relation(fields: [Employee_Fk], references: [Id])
  INVOICE_ORDER_SERVICE_DETAILS INVOICE_ORDER_SERVICE_DETAILS[]
  INVOICE_ORDER_PRODUCT_DETAILS INVOICE_ORDER_PRODUCT_DETAILS[]
}


model ACTIVITY_LOG {
  Id          Int       @id @default(autoincrement())
  Date        DateTime
  name        String
  Description String
  Created_At  DateTime  @default(now())
  Updated_At  DateTime? @default(now()) @updatedAt
}

model INVENTORY_MOVEMENT {
  Id          Int                     @id @default(autoincrement())
  Product_Fk  Int
  Quantity    Int
  Description String
  State       INVENTORY_MOVEMENT_TYPE
  Created_At  DateTime                @default(now())
  Updated_At  DateTime?               @default(now()) @updatedAt
  Product     PRODUCT                 @relation(fields: [Product_Fk], references: [Id], onDelete: Cascade)
}
